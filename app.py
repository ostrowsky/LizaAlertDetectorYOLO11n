import os  # –†–∞–±–æ—Ç–∞ —Å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π (–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —Ñ–∞–π–ª—ã).
import cv2  # OpenCV –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
import torch  # PyTorch –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –º–æ–¥–µ–ª—å—é.
import numpy as np  # NumPy –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–∞—Å—Å–∏–≤–∞–º–∏.
import logging  # –ú–æ–¥—É–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
import asyncio  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è Telegram-–±–æ—Ç–∞).
from datetime import datetime  # –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º.

# Flask (–≤–µ–±-—Å–µ—Ä–≤–µ—Ä), YOLO-–º–æ–¥–µ–ª—å (ultralytics), Telegram-–±–æ—Ç.
from flask import Flask, request, jsonify, send_file
from ultralytics import YOLO
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters

from threading import Thread  # –î–ª—è –∑–∞–ø—É—Å–∫–∞ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
from werkzeug.serving import make_server  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π WSGI-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Flask.

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
MODEL_PATH = "weights/yolo11n_master_200_tile_aug_unfreez_best.pt"  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–µ—Å–æ–≤ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ YOLO.
TILE_SIZE = 1024  # –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ —Ç–∞–π–ª–∞ (1024√ó1024 –ø–∏–∫—Å–µ–ª–µ–π).
OVERLAP = 256  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –º–µ–∂–¥—É —Ç–∞–π–ª–∞–º–∏.
BOT_TOKEN = os.getenv("TG_TOKEN", "your_token_here")  # –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∞.
UPLOAD_DIR = "uploads"  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
RESULTS_DIR = "results"  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.
LOG_FILE = "server.log"  # –§–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞ (–ª–æ–≥–æ–≤).

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.
os.makedirs(UPLOAD_DIR, exist_ok=True)
os.makedirs(RESULTS_DIR, exist_ok=True)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    filename=LOG_FILE,
    filemode="a",
    format="%(asctime)s - %(levelname)s - %(message)s"
)  # –£–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: CUDA (GPU) –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ CPU.
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å YOLO –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.
model = YOLO(MODEL_PATH).to(device)

# === –ò–Ω—Ñ–µ—Ä–µ–Ω—Å ===
def run_inference_on_image(img_path):
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    logging.info(f"üîç Inference: {img_path}")
    # –°—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –¥–∏—Å–∫–∞.
    original = cv2.imread(img_path)
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É (h) –∏ —à–∏—Ä–∏–Ω—É (w) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    h, w = original.shape[:2]
    # –†–∞–∑–º–µ—Ä —à–∞–≥–∞ (stride) —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è.
    stride = TILE_SIZE - OVERLAP

    tiles = []   # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ç–∞–π–ª–æ–≤ (–∫—É—Å–æ—á–∫–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è).
    coords = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è (x, y) –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ —É–≥–ª–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–ª–∞.

    # –†–∞–∑–±–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–∞–π–ª—ã.
    for y in range(0, h, stride):
        for x in range(0, w, stride):
            # –í—ã—Ä–µ–∑–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç (—Ç–∞–π–ª) –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
            tile = original[y:y+TILE_SIZE, x:x+TILE_SIZE]
            # –ï—Å–ª–∏ —Ç–∞–π–ª –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞ –∫—Ä–∞—é), –¥–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.
            if tile.shape[0] < TILE_SIZE or tile.shape[1] < TILE_SIZE:
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.
                pad = np.zeros((TILE_SIZE, TILE_SIZE, 3), dtype=np.uint8)
                # –ö–æ–ø–∏—Ä—É–µ–º —Ç–∞–π–ª –≤ –ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏.
                pad[:tile.shape[0], :tile.shape[1]] = tile
                tile = pad
            tiles.append(tile)
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–∞–π–ª–∞ (—Å–¥–≤–∏–≥ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è).
            coords.append((x, y))

    # –ü–æ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–π–ª–æ–≤ –≤ –º–æ–¥–µ–ª—å –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏.
    results = model(tiles, verbose=False)

    # –û–±—Ö–æ–¥–∏–º –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –µ–º—É —Å–º–µ—â–µ–Ω–∏—è.
    for r, (x0, y0) in zip(results, coords):
        # –†–µ–∑—É–ª—å—Ç–∞—Ç r —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–º–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [x1, y1, x2, y2] –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–∞–π–ª–∞.
        for box in r.boxes.xyxy.cpu().numpy():
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–º–∫–∏ –æ—Ç —Ç–∞–π–ª–∞ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.
            x1, y1, x2, y2 = map(int, box[:4] + np.array([x0, y0, x0, y0]))
            # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.
            cv2.rectangle(original, (x1, y1), (x2, y2), (0, 0, 255), 2)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º.
    out_path = os.path.join(
        RESULTS_DIR,
        f"result_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞–º–∫–∞–º–∏.
    cv2.imwrite(out_path, original)
    return out_path  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.

# === Flask API ===
flask_app = Flask(__name__)  # –°–æ–∑–¥–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.

@flask_app.route("/", methods=["GET"])
def index():
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ.
    return "üöÄ LizaAlert bot is running!"

@flask_app.route("/predict", methods=["POST"])
def predict():
    # Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞.
    if "image" not in request.files:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É.
        return jsonify({"error": "No image uploaded"}), 400

    file = request.files["image"]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ (jpg/png).
    if not file.filename.lower().endswith(('.jpg', '.jpeg', '.png')):
        return jsonify({"error": "Unsupported format"}), 400

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é uploads.
    img_path = os.path.join(UPLOAD_DIR, file.filename)
    file.save(img_path)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ.
    result_path = run_inference_on_image(img_path)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∫–ª–∏–µ–Ω—Ç—É.
    return send_file(result_path, mimetype="image/jpeg")

class FlaskServer(Thread):
    def run(self):
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –Ω–∞ –ø–æ—Ä—Ç—É 7860.
        make_server("0.0.0.0", 7860, flask_app).serve_forever()

# === Telegram Bot ===
async def start(update: Update, context):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    logging.info(f"/start by {update.effective_user.id}")
    await update.message.reply_text("üëã Send an image for pedestrian detection.")

async def handle_image(update: Update, context):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.
    try:
        # –ë–µ—Ä–µ–º —Å–∞–º—É—é –≤—ã—Å–æ–∫–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
        photo = update.message.photo[-1]
        file = await photo.get_file()
        image_bytes = await file.download_as_bytearray()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏.
        uid = update.effective_user.id
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        img_path = os.path.join(UPLOAD_DIR, f"{uid}_{timestamp}.jpg")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ª–æ–∫–∞–ª—å–Ω–æ.
        with open(img_path, "wb") as f:
            f.write(image_bytes)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        result_path = run_inference_on_image(img_path)
        await update.message.reply_photo(photo=open(result_path, "rb"))

    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        logging.exception("Telegram photo error")
        await update.message.reply_text("‚ö†Ô∏è Error processing image.")

async def handle_document(update: Update, context):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–∞–π–ª (document), –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏.
    doc = update.message.document
    if not doc.mime_type.startswith("image/"):
        # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–Ω –Ω–µ image-—Ñ–∞–π–ª, –ø—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.
        await update.message.reply_text("‚ùó Please send an image file (jpg/png).")
        return

    try:
        file = await doc.get_file()
        image_bytes = await file.download_as_bytearray()

        uid = update.effective_user.id
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{uid}_{timestamp}.jpg"
        img_path = os.path.join(UPLOAD_DIR, filename)

        with open(img_path, "wb") as f:
            f.write(image_bytes)

        result_path = run_inference_on_image(img_path)
        await update.message.reply_photo(photo=open(result_path, "rb"))

    except Exception as e:
        logging.exception("Telegram document error")
        await update.message.reply_text("‚ö†Ô∏è Error processing document image.")

async def handle_other(update: Update, context):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    await update.message.reply_text("üì∏ Please send an image.")

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π ===
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    flask_thread = FlaskServer()
    flask_thread.start()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram-–±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏.
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_image))
    app.add_handler(MessageHandler(filters.Document.IMAGE, handle_document))
    app.add_handler(MessageHandler(~(filters.PHOTO | filters.Document.IMAGE), handle_other))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π polling Telegram-–±–æ—Ç–∞.
    await app.run_polling()

if __name__ == "__main__":
    # –ß—Ç–æ–±—ã asyncio –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥–∞—Ö —Ç–∏–ø–∞ Jupyter, –ø—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio.
    import nest_asyncio
    nest_asyncio.apply()

    import asyncio
    asyncio.run(main())
